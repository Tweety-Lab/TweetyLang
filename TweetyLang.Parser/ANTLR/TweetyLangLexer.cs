//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TweetyLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TweetyLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		CHARACTER=25, DIGIT=26, NUMBER=27, WS=28, COMMENT=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "CHARACTER", 
		"DIGIT", "NUMBER", "WS", "COMMENT"
	};


	public TweetyLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TweetyLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'.'", "'{'", "'}'", "'import'", "';'", "'_'", "'void'", 
		"'('", "')'", "','", "'if'", "'else'", "'='", "'return'", "'+'", "'-'", 
		"'*'", "'/'", "'true'", "'false'", "'i32'", "'bool'", "'export'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "CHARACTER", "DIGIT", "NUMBER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TweetyLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TweetyLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
		1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,
		1,25,1,26,4,26,152,8,26,11,26,12,26,153,1,27,4,27,157,8,27,11,27,12,27,
		158,1,27,1,27,1,28,1,28,1,28,1,28,5,28,167,8,28,10,28,12,28,170,9,28,1,
		28,1,28,0,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,1,0,4,2,0,65,90,97,122,1,0,48,57,3,0,
		9,10,13,13,32,32,2,0,10,10,13,13,175,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,66,
		1,0,0,0,5,68,1,0,0,0,7,70,1,0,0,0,9,72,1,0,0,0,11,79,1,0,0,0,13,81,1,0,
		0,0,15,83,1,0,0,0,17,88,1,0,0,0,19,90,1,0,0,0,21,92,1,0,0,0,23,94,1,0,
		0,0,25,97,1,0,0,0,27,102,1,0,0,0,29,104,1,0,0,0,31,111,1,0,0,0,33,113,
		1,0,0,0,35,115,1,0,0,0,37,117,1,0,0,0,39,119,1,0,0,0,41,124,1,0,0,0,43,
		130,1,0,0,0,45,134,1,0,0,0,47,139,1,0,0,0,49,146,1,0,0,0,51,148,1,0,0,
		0,53,151,1,0,0,0,55,156,1,0,0,0,57,162,1,0,0,0,59,60,5,109,0,0,60,61,5,
		111,0,0,61,62,5,100,0,0,62,63,5,117,0,0,63,64,5,108,0,0,64,65,5,101,0,
		0,65,2,1,0,0,0,66,67,5,46,0,0,67,4,1,0,0,0,68,69,5,123,0,0,69,6,1,0,0,
		0,70,71,5,125,0,0,71,8,1,0,0,0,72,73,5,105,0,0,73,74,5,109,0,0,74,75,5,
		112,0,0,75,76,5,111,0,0,76,77,5,114,0,0,77,78,5,116,0,0,78,10,1,0,0,0,
		79,80,5,59,0,0,80,12,1,0,0,0,81,82,5,95,0,0,82,14,1,0,0,0,83,84,5,118,
		0,0,84,85,5,111,0,0,85,86,5,105,0,0,86,87,5,100,0,0,87,16,1,0,0,0,88,89,
		5,40,0,0,89,18,1,0,0,0,90,91,5,41,0,0,91,20,1,0,0,0,92,93,5,44,0,0,93,
		22,1,0,0,0,94,95,5,105,0,0,95,96,5,102,0,0,96,24,1,0,0,0,97,98,5,101,0,
		0,98,99,5,108,0,0,99,100,5,115,0,0,100,101,5,101,0,0,101,26,1,0,0,0,102,
		103,5,61,0,0,103,28,1,0,0,0,104,105,5,114,0,0,105,106,5,101,0,0,106,107,
		5,116,0,0,107,108,5,117,0,0,108,109,5,114,0,0,109,110,5,110,0,0,110,30,
		1,0,0,0,111,112,5,43,0,0,112,32,1,0,0,0,113,114,5,45,0,0,114,34,1,0,0,
		0,115,116,5,42,0,0,116,36,1,0,0,0,117,118,5,47,0,0,118,38,1,0,0,0,119,
		120,5,116,0,0,120,121,5,114,0,0,121,122,5,117,0,0,122,123,5,101,0,0,123,
		40,1,0,0,0,124,125,5,102,0,0,125,126,5,97,0,0,126,127,5,108,0,0,127,128,
		5,115,0,0,128,129,5,101,0,0,129,42,1,0,0,0,130,131,5,105,0,0,131,132,5,
		51,0,0,132,133,5,50,0,0,133,44,1,0,0,0,134,135,5,98,0,0,135,136,5,111,
		0,0,136,137,5,111,0,0,137,138,5,108,0,0,138,46,1,0,0,0,139,140,5,101,0,
		0,140,141,5,120,0,0,141,142,5,112,0,0,142,143,5,111,0,0,143,144,5,114,
		0,0,144,145,5,116,0,0,145,48,1,0,0,0,146,147,7,0,0,0,147,50,1,0,0,0,148,
		149,7,1,0,0,149,52,1,0,0,0,150,152,3,51,25,0,151,150,1,0,0,0,152,153,1,
		0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,54,1,0,0,0,155,157,7,2,0,0,156,
		155,1,0,0,0,157,158,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,160,1,
		0,0,0,160,161,6,27,0,0,161,56,1,0,0,0,162,163,5,47,0,0,163,164,5,47,0,
		0,164,168,1,0,0,0,165,167,8,3,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,
		166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,172,6,
		28,0,0,172,58,1,0,0,0,4,0,153,158,168,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
