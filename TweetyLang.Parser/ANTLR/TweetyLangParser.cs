//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TweetyLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class TweetyLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, CHAR_LITERAL=29, STRING_LITERAL=30, 
		ESCAPE_SEQUENCE=31, CHARACTER=32, NUMBER=33, WS=34, COMMENT=35;
	public const int
		RULE_program = 0, RULE_top_level_declaration = 1, RULE_module_definition = 2, 
		RULE_module_name = 3, RULE_module_block = 4, RULE_import_statement = 5, 
		RULE_identifier = 6, RULE_struct_definition = 7, RULE_object_block = 8, 
		RULE_field_declaration = 9, RULE_function_definition = 10, RULE_function_call = 11, 
		RULE_arguments = 12, RULE_definition = 13, RULE_statement_block = 14, 
		RULE_statement = 15, RULE_raw_statement = 16, RULE_compound_statement = 17, 
		RULE_if_statement = 18, RULE_else_block = 19, RULE_assignment = 20, RULE_declaration = 21, 
		RULE_return_statement = 22, RULE_expression_statement = 23, RULE_expression = 24, 
		RULE_term = 25, RULE_factor = 26, RULE_boolean_literal = 27, RULE_object_instantiation = 28, 
		RULE_parameters = 29, RULE_parameter = 30, RULE_type = 31, RULE_pointer_suffix = 32, 
		RULE_raw_type = 33, RULE_modifier = 34;
	public static readonly string[] ruleNames = {
		"program", "top_level_declaration", "module_definition", "module_name", 
		"module_block", "import_statement", "identifier", "struct_definition", 
		"object_block", "field_declaration", "function_definition", "function_call", 
		"arguments", "definition", "statement_block", "statement", "raw_statement", 
		"compound_statement", "if_statement", "else_block", "assignment", "declaration", 
		"return_statement", "expression_statement", "expression", "term", "factor", 
		"boolean_literal", "object_instantiation", "parameters", "parameter", 
		"type", "pointer_suffix", "raw_type", "modifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'module'", "'::'", "'{'", "'}'", "'import'", "';'", "'_'", "'struct'", 
		"'='", "'void'", "'('", "')'", "','", "'if'", "'else'", "'return'", "'+'", 
		"'-'", "'*'", "'/'", "'true'", "'false'", "'new'", "'i32'", "'bool'", 
		"'char'", "'export'", "'extern'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "CHAR_LITERAL", "STRING_LITERAL", "ESCAPE_SEQUENCE", 
		"CHARACTER", "NUMBER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TweetyLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TweetyLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TweetyLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TweetyLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TweetyLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_declarationContext[] top_level_declaration() {
			return GetRuleContexts<Top_level_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_declarationContext top_level_declaration(int i) {
			return GetRuleContext<Top_level_declarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__4) {
				{
				{
				State = 70;
				top_level_declaration();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 76;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Module_definitionContext module_definition() {
			return GetRuleContext<Module_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_statementContext import_statement() {
			return GetRuleContext<Import_statementContext>(0);
		}
		public Top_level_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterTop_level_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitTop_level_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTop_level_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Top_level_declarationContext top_level_declaration() {
		Top_level_declarationContext _localctx = new Top_level_declarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_top_level_declaration);
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				module_definition();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 79;
				import_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Module_blockContext module_block() {
			return GetRuleContext<Module_blockContext>(0);
		}
		public Module_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterModule_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitModule_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_definitionContext module_definition() {
		Module_definitionContext _localctx = new Module_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_module_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			Match(T__0);
			State = 83;
			module_name();
			State = 84;
			module_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Module_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitModule_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_nameContext module_name() {
		Module_nameContext _localctx = new Module_nameContext(Context, State);
		EnterRule(_localctx, 6, RULE_module_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			identifier();
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 87;
				Match(T__1);
				State = 88;
				identifier();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Module_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public Module_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterModule_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitModule_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Module_blockContext module_block() {
		Module_blockContext _localctx = new Module_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_module_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(T__2);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 520094976L) != 0)) {
				{
				{
				State = 95;
				definition();
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Module_nameContext module_name() {
			return GetRuleContext<Module_nameContext>(0);
		}
		public Import_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitImport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Import_statementContext import_statement() {
		Import_statementContext _localctx = new Import_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_import_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__4);
			State = 104;
			module_name();
			State = 105;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CHARACTER() { return GetTokens(TweetyLangParser.CHARACTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER(int i) {
			return GetToken(TweetyLangParser.CHARACTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(TweetyLangParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(TweetyLangParser.NUMBER, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			Match(CHARACTER);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 12884902016L) != 0)) {
				{
				{
				State = 108;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 12884902016L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_blockContext object_block() {
			return GetRuleContext<Object_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 14, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26 || _la==T__27) {
				{
				{
				State = 114;
				modifier();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120;
			Match(T__7);
			State = 121;
			identifier();
			State = 122;
			object_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext[] function_definition() {
			return GetRuleContexts<Function_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition(int i) {
			return GetRuleContext<Function_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declarationContext[] field_declaration() {
			return GetRuleContexts<Field_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declarationContext field_declaration(int i) {
			return GetRuleContext<Field_declarationContext>(i);
		}
		public Object_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterObject_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitObject_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_blockContext object_block() {
		Object_blockContext _localctx = new Object_blockContext(Context, State);
		EnterRule(_localctx, 16, RULE_object_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(T__2);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 520094720L) != 0)) {
				{
				State = 127;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 125;
					function_definition();
					}
					break;
				case 2:
					{
					State = 126;
					field_declaration();
					}
					break;
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Field_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitField_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declarationContext field_declaration() {
		Field_declarationContext _localctx = new Field_declarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_field_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			type();
			State = 135;
			identifier();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 136;
				Match(T__8);
				State = 137;
				expression();
				}
			}

			State = 140;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__26 || _la==T__27) {
				{
				{
				State = 142;
				modifier();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__23:
			case T__24:
			case T__25:
				{
				State = 148;
				type();
				}
				break;
			case T__9:
				{
				State = 149;
				Match(T__9);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 152;
			identifier();
			State = 153;
			Match(T__10);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) {
				{
				State = 154;
				parameters();
				}
			}

			State = 157;
			Match(T__11);
			State = 160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				{
				State = 158;
				statement_block();
				}
				break;
			case T__5:
				{
				State = 159;
				Match(T__5);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			identifier();
			State = 163;
			Match(T__10);
			State = 165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14510196736L) != 0)) {
				{
				State = 164;
				arguments();
				}
			}

			State = 167;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 24, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			expression();
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 170;
				Match(T__12);
				State = 171;
				expression();
				}
				}
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 26, RULE_definition);
		try {
			State = 179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 177;
				struct_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 178;
				function_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext[] compound_statement() {
			return GetRuleContexts<Compound_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement(int i) {
			return GetRuleContext<Compound_statementContext>(i);
		}
		public Statement_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterStatement_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitStatement_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_blockContext statement_block() {
		Statement_blockContext _localctx = new Statement_blockContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			Match(T__2);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14627719168L) != 0)) {
				{
				State = 184;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__10:
				case T__15:
				case T__20:
				case T__21:
				case T__22:
				case T__23:
				case T__24:
				case T__25:
				case CHAR_LITERAL:
				case STRING_LITERAL:
				case CHARACTER:
				case NUMBER:
					{
					State = 182;
					statement();
					}
					break;
				case T__13:
					{
					State = 183;
					compound_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 189;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Raw_statementContext raw_statement() {
			return GetRuleContext<Raw_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			raw_statement();
			State = 192;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Raw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterRaw_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitRaw_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaw_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raw_statementContext raw_statement() {
		Raw_statementContext _localctx = new Raw_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_raw_statement);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194;
				return_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196;
				declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197;
				expression_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 34, RULE_compound_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			if_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Else_blockContext else_block() {
			return GetRuleContext<Else_blockContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 36, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(T__13);
			State = 203;
			Match(T__10);
			State = 204;
			expression();
			State = 205;
			Match(T__11);
			State = 206;
			statement_block();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 207;
				else_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public Else_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitElse_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_blockContext else_block() {
		Else_blockContext _localctx = new Else_blockContext(Context, State);
		EnterRule(_localctx, 38, RULE_else_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(T__14);
			State = 211;
			statement_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 40, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			identifier();
			State = 214;
			Match(T__8);
			State = 215;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 42, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			type();
			State = 218;
			identifier();
			State = 219;
			Match(T__8);
			State = 220;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 44, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(T__15);
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14510196736L) != 0)) {
				{
				State = 223;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			term();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16 || _la==T__17) {
				{
				{
				State = 229;
				_la = TokenStream.LA(1);
				if ( !(_la==T__16 || _la==T__17) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 230;
				term();
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 50, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			factor();
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18 || _la==T__19) {
				{
				{
				State = 237;
				_la = TokenStream.LA(1);
				if ( !(_la==T__18 || _la==T__19) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 238;
				factor();
				}
				}
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TweetyLangParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Object_instantiationContext object_instantiation() {
			return GetRuleContext<Object_instantiationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LITERAL() { return GetToken(TweetyLangParser.CHAR_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(TweetyLangParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 52, RULE_factor);
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 244;
				Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 246;
				function_call();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 247;
				object_instantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 248;
				boolean_literal();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 249;
				Match(CHAR_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 250;
				Match(STRING_LITERAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 251;
				Match(T__10);
				State = 252;
				expression();
				State = 253;
				Match(T__11);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 54, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !(_la==T__20 || _la==T__21) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_instantiationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public Object_instantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_instantiation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterObject_instantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitObject_instantiation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_instantiation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_instantiationContext object_instantiation() {
		Object_instantiationContext _localctx = new Object_instantiationContext(Context, State);
		EnterRule(_localctx, 56, RULE_object_instantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(T__22);
			State = 260;
			identifier();
			State = 261;
			Match(T__10);
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 14510196736L) != 0)) {
				{
				State = 262;
				arguments();
				}
			}

			State = 265;
			Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 58, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			parameter();
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 268;
				Match(T__12);
				State = 269;
				parameter();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			type();
			State = 276;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Raw_typeContext raw_type() {
			return GetRuleContext<Raw_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pointer_suffixContext pointer_suffix() {
			return GetRuleContext<Pointer_suffixContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			raw_type();
			State = 279;
			pointer_suffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_suffixContext : ParserRuleContext {
		public Pointer_suffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterPointer_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitPointer_suffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_suffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_suffixContext pointer_suffix() {
		Pointer_suffixContext _localctx = new Pointer_suffixContext(Context, State);
		EnterRule(_localctx, 64, RULE_pointer_suffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18) {
				{
				{
				State = 281;
				Match(T__18);
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raw_typeContext : ParserRuleContext {
		public Raw_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raw_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterRaw_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitRaw_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaw_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raw_typeContext raw_type() {
		Raw_typeContext _localctx = new Raw_typeContext(Context, State);
		EnterRule(_localctx, 66, RULE_raw_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 117440512L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITweetyLangListener typedListener = listener as ITweetyLangListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITweetyLangVisitor<TResult> typedVisitor = visitor as ITweetyLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_la = TokenStream.LA(1);
			if ( !(_la==T__26 || _la==T__27) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,35,292,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,5,0,72,
		8,0,10,0,12,0,75,9,0,1,0,1,0,1,1,1,1,3,1,81,8,1,1,2,1,2,1,2,1,2,1,3,1,
		3,1,3,5,3,90,8,3,10,3,12,3,93,9,3,1,4,1,4,5,4,97,8,4,10,4,12,4,100,9,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,5,6,110,8,6,10,6,12,6,113,9,6,1,7,5,7,
		116,8,7,10,7,12,7,119,9,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,5,8,128,8,8,10,8,
		12,8,131,9,8,1,8,1,8,1,9,1,9,1,9,1,9,3,9,139,8,9,1,9,1,9,1,10,5,10,144,
		8,10,10,10,12,10,147,9,10,1,10,1,10,3,10,151,8,10,1,10,1,10,1,10,3,10,
		156,8,10,1,10,1,10,1,10,3,10,161,8,10,1,11,1,11,1,11,3,11,166,8,11,1,11,
		1,11,1,12,1,12,1,12,5,12,173,8,12,10,12,12,12,176,9,12,1,13,1,13,3,13,
		180,8,13,1,14,1,14,1,14,5,14,185,8,14,10,14,12,14,188,9,14,1,14,1,14,1,
		15,1,15,1,15,1,16,1,16,1,16,1,16,3,16,199,8,16,1,17,1,17,1,18,1,18,1,18,
		1,18,1,18,1,18,3,18,209,8,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,
		21,1,21,1,21,1,21,1,22,1,22,3,22,225,8,22,1,23,1,23,1,24,1,24,1,24,5,24,
		232,8,24,10,24,12,24,235,9,24,1,25,1,25,1,25,5,25,240,8,25,10,25,12,25,
		243,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,256,
		8,26,1,27,1,27,1,28,1,28,1,28,1,28,3,28,264,8,28,1,28,1,28,1,29,1,29,1,
		29,5,29,271,8,29,10,29,12,29,274,9,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
		32,5,32,283,8,32,10,32,12,32,286,9,32,1,33,1,33,1,34,1,34,1,34,0,0,35,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,0,6,2,0,7,7,32,33,1,0,17,18,1,0,19,20,1,
		0,21,22,1,0,24,26,1,0,27,28,291,0,73,1,0,0,0,2,80,1,0,0,0,4,82,1,0,0,0,
		6,86,1,0,0,0,8,94,1,0,0,0,10,103,1,0,0,0,12,107,1,0,0,0,14,117,1,0,0,0,
		16,124,1,0,0,0,18,134,1,0,0,0,20,145,1,0,0,0,22,162,1,0,0,0,24,169,1,0,
		0,0,26,179,1,0,0,0,28,181,1,0,0,0,30,191,1,0,0,0,32,198,1,0,0,0,34,200,
		1,0,0,0,36,202,1,0,0,0,38,210,1,0,0,0,40,213,1,0,0,0,42,217,1,0,0,0,44,
		222,1,0,0,0,46,226,1,0,0,0,48,228,1,0,0,0,50,236,1,0,0,0,52,255,1,0,0,
		0,54,257,1,0,0,0,56,259,1,0,0,0,58,267,1,0,0,0,60,275,1,0,0,0,62,278,1,
		0,0,0,64,284,1,0,0,0,66,287,1,0,0,0,68,289,1,0,0,0,70,72,3,2,1,0,71,70,
		1,0,0,0,72,75,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,73,
		1,0,0,0,76,77,5,0,0,1,77,1,1,0,0,0,78,81,3,4,2,0,79,81,3,10,5,0,80,78,
		1,0,0,0,80,79,1,0,0,0,81,3,1,0,0,0,82,83,5,1,0,0,83,84,3,6,3,0,84,85,3,
		8,4,0,85,5,1,0,0,0,86,91,3,12,6,0,87,88,5,2,0,0,88,90,3,12,6,0,89,87,1,
		0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,7,1,0,0,0,93,91,1,0,
		0,0,94,98,5,3,0,0,95,97,3,26,13,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,
		0,0,0,98,99,1,0,0,0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,5,4,0,0,102,
		9,1,0,0,0,103,104,5,5,0,0,104,105,3,6,3,0,105,106,5,6,0,0,106,11,1,0,0,
		0,107,111,5,32,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,
		109,1,0,0,0,111,112,1,0,0,0,112,13,1,0,0,0,113,111,1,0,0,0,114,116,3,68,
		34,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,
		120,1,0,0,0,119,117,1,0,0,0,120,121,5,8,0,0,121,122,3,12,6,0,122,123,3,
		16,8,0,123,15,1,0,0,0,124,129,5,3,0,0,125,128,3,20,10,0,126,128,3,18,9,
		0,127,125,1,0,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,5,4,0,0,133,17,1,0,
		0,0,134,135,3,62,31,0,135,138,3,12,6,0,136,137,5,9,0,0,137,139,3,48,24,
		0,138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,141,5,6,0,0,141,
		19,1,0,0,0,142,144,3,68,34,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,1,
		0,0,0,145,146,1,0,0,0,146,150,1,0,0,0,147,145,1,0,0,0,148,151,3,62,31,
		0,149,151,5,10,0,0,150,148,1,0,0,0,150,149,1,0,0,0,151,152,1,0,0,0,152,
		153,3,12,6,0,153,155,5,11,0,0,154,156,3,58,29,0,155,154,1,0,0,0,155,156,
		1,0,0,0,156,157,1,0,0,0,157,160,5,12,0,0,158,161,3,28,14,0,159,161,5,6,
		0,0,160,158,1,0,0,0,160,159,1,0,0,0,161,21,1,0,0,0,162,163,3,12,6,0,163,
		165,5,11,0,0,164,166,3,24,12,0,165,164,1,0,0,0,165,166,1,0,0,0,166,167,
		1,0,0,0,167,168,5,12,0,0,168,23,1,0,0,0,169,174,3,48,24,0,170,171,5,13,
		0,0,171,173,3,48,24,0,172,170,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,
		174,175,1,0,0,0,175,25,1,0,0,0,176,174,1,0,0,0,177,180,3,14,7,0,178,180,
		3,20,10,0,179,177,1,0,0,0,179,178,1,0,0,0,180,27,1,0,0,0,181,186,5,3,0,
		0,182,185,3,30,15,0,183,185,3,34,17,0,184,182,1,0,0,0,184,183,1,0,0,0,
		185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,0,0,187,189,1,0,0,0,188,186,
		1,0,0,0,189,190,5,4,0,0,190,29,1,0,0,0,191,192,3,32,16,0,192,193,5,6,0,
		0,193,31,1,0,0,0,194,199,3,44,22,0,195,199,3,40,20,0,196,199,3,42,21,0,
		197,199,3,46,23,0,198,194,1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,0,198,
		197,1,0,0,0,199,33,1,0,0,0,200,201,3,36,18,0,201,35,1,0,0,0,202,203,5,
		14,0,0,203,204,5,11,0,0,204,205,3,48,24,0,205,206,5,12,0,0,206,208,3,28,
		14,0,207,209,3,38,19,0,208,207,1,0,0,0,208,209,1,0,0,0,209,37,1,0,0,0,
		210,211,5,15,0,0,211,212,3,28,14,0,212,39,1,0,0,0,213,214,3,12,6,0,214,
		215,5,9,0,0,215,216,3,48,24,0,216,41,1,0,0,0,217,218,3,62,31,0,218,219,
		3,12,6,0,219,220,5,9,0,0,220,221,3,48,24,0,221,43,1,0,0,0,222,224,5,16,
		0,0,223,225,3,48,24,0,224,223,1,0,0,0,224,225,1,0,0,0,225,45,1,0,0,0,226,
		227,3,48,24,0,227,47,1,0,0,0,228,233,3,50,25,0,229,230,7,1,0,0,230,232,
		3,50,25,0,231,229,1,0,0,0,232,235,1,0,0,0,233,231,1,0,0,0,233,234,1,0,
		0,0,234,49,1,0,0,0,235,233,1,0,0,0,236,241,3,52,26,0,237,238,7,2,0,0,238,
		240,3,52,26,0,239,237,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,
		1,0,0,0,242,51,1,0,0,0,243,241,1,0,0,0,244,256,5,33,0,0,245,256,3,12,6,
		0,246,256,3,22,11,0,247,256,3,56,28,0,248,256,3,54,27,0,249,256,5,29,0,
		0,250,256,5,30,0,0,251,252,5,11,0,0,252,253,3,48,24,0,253,254,5,12,0,0,
		254,256,1,0,0,0,255,244,1,0,0,0,255,245,1,0,0,0,255,246,1,0,0,0,255,247,
		1,0,0,0,255,248,1,0,0,0,255,249,1,0,0,0,255,250,1,0,0,0,255,251,1,0,0,
		0,256,53,1,0,0,0,257,258,7,3,0,0,258,55,1,0,0,0,259,260,5,23,0,0,260,261,
		3,12,6,0,261,263,5,11,0,0,262,264,3,24,12,0,263,262,1,0,0,0,263,264,1,
		0,0,0,264,265,1,0,0,0,265,266,5,12,0,0,266,57,1,0,0,0,267,272,3,60,30,
		0,268,269,5,13,0,0,269,271,3,60,30,0,270,268,1,0,0,0,271,274,1,0,0,0,272,
		270,1,0,0,0,272,273,1,0,0,0,273,59,1,0,0,0,274,272,1,0,0,0,275,276,3,62,
		31,0,276,277,3,12,6,0,277,61,1,0,0,0,278,279,3,66,33,0,279,280,3,64,32,
		0,280,63,1,0,0,0,281,283,5,19,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,
		282,1,0,0,0,284,285,1,0,0,0,285,65,1,0,0,0,286,284,1,0,0,0,287,288,7,4,
		0,0,288,67,1,0,0,0,289,290,7,5,0,0,290,69,1,0,0,0,27,73,80,91,98,111,117,
		127,129,138,145,150,155,160,165,174,179,184,186,198,208,224,233,241,255,
		263,272,284
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
